"""initial migration

Revision ID: 466824e248b2
Revises: 
Create Date: 2024-10-08 08:56:41.247013

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector
from sqlalchemy import text
# revision identifiers, used by Alembic.
revision: str = '466824e248b2'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(text('CREATE EXTENSION IF NOT EXISTS vector'))
    op.create_table('regulations',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('title', sa.String(), nullable=True),
                    sa.Column('abstract', sa.String(), nullable=True),
                    sa.Column('part', sa.String(), nullable=True),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('latest_amendment_date',
                              sa.Date(), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_regulations_id'),
                    'regulations', ['id'], unique=False)
    op.create_index(op.f('ix_regulations_name'),
                    'regulations', ['name'], unique=False)
    op.create_index(op.f('ix_regulations_part'),
                    'regulations', ['part'], unique=False)
    op.create_index(op.f('ix_regulations_title'),
                    'regulations', ['title'], unique=False)
    op.create_table('setups',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('title', sa.Integer(), nullable=True),
                    sa.Column('parts', sa.JSON(),
                              nullable=False, default="[]"),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_setups_id'), 'setups', ['id'], unique=False)
    op.create_table('sops',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('abstract', sa.String(), nullable=True),
                    sa.Column('owner', sa.String(), nullable=True),
                    sa.Column('url', sa.Text(), nullable=True),
                    sa.Column('has_changed', sa.Boolean(), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_sops_id'), 'sops', ['id'], unique=False)
    op.create_index(op.f('ix_sops_name'), 'sops', ['name'], unique=False)
    op.create_table('regulation_segments',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('raw_content', sa.String(), nullable=True),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('regulation_id', sa.Integer(), nullable=False),
                    sa.Column('embedding', pgvector.sqlalchemy.Vector(
                        dim=768), nullable=True),
                    sa.Column('has_changed', sa.Boolean(), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['regulation_id'], ['regulations.id'], onupdate='CASCADE', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_regulation_segments_id'),
                    'regulation_segments', ['id'], unique=False)
    op.create_table('sop_on_regulations',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('sop_id', sa.Integer(), nullable=False),
                    sa.Column('regulation_id', sa.Integer(), nullable=False),
                    sa.Column('similarity', sa.Float(
                        precision=2), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['regulation_id'], ['regulations.id'], onupdate='CASCADE', ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['sop_id'], ['sops.id'],
                                            onupdate='CASCADE', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_sop_on_regulations_id'),
                    'sop_on_regulations', ['id'], unique=False)
    op.create_index(op.f('ix_sop_on_regulations_similarity'),
                    'sop_on_regulations', ['similarity'], unique=False)
    op.create_table('sop_segments',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('sop_id', sa.Integer(), nullable=False),
                    sa.Column('raw_content', sa.String(), nullable=True),
                    sa.Column('embedding', pgvector.sqlalchemy.Vector(
                        dim=768), nullable=True),
                    sa.Column('has_changed', sa.Boolean(), nullable=True),
                    sa.ForeignKeyConstraint(['sop_id'], ['sops.id'],
                                            onupdate='CASCADE', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_sop_segments_id'),
                    'sop_segments', ['id'], unique=False)
    op.create_table('sop_segment_on_regulation_segment',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('sop_segment_id', sa.Integer(), nullable=False),
                    sa.Column('regulation_segment_id',
                              sa.Integer(), nullable=False),
                    sa.Column('similarity', sa.Float(
                        precision=2), nullable=True),
                    sa.ForeignKeyConstraint(['regulation_segment_id'], [
                        'regulation_segments.id'], onupdate='CASCADE', ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['sop_segment_id'], [
                        'sop_segments.id'], onupdate='CASCADE', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_sop_segment_on_regulation_segment_id'),
                    'sop_segment_on_regulation_segment', ['id'], unique=False)
    op.create_index(op.f('ix_sop_segment_on_regulation_segment_similarity'),
                    'sop_segment_on_regulation_segment', ['similarity'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_sop_segment_on_regulation_segment_similarity'),
                  table_name='sop_segment_on_regulation_segment')
    op.drop_index(op.f('ix_sop_segment_on_regulation_segment_id'),
                  table_name='sop_segment_on_regulation_segment')
    op.drop_table('sop_segment_on_regulation_segment')
    op.drop_index(op.f('ix_sop_segments_id'), table_name='sop_segments')
    op.drop_table('sop_segments')
    op.drop_index(op.f('ix_sop_on_regulations_similarity'),
                  table_name='sop_on_regulations')
    op.drop_index(op.f('ix_sop_on_regulations_id'),
                  table_name='sop_on_regulations')
    op.drop_table('sop_on_regulations')
    op.drop_index(op.f('ix_regulation_segments_id'),
                  table_name='regulation_segments')
    op.drop_table('regulation_segments')
    op.drop_index(op.f('ix_sops_name'), table_name='sops')
    op.drop_index(op.f('ix_sops_id'), table_name='sops')
    op.drop_table('sops')
    op.drop_index(op.f('ix_setups_id'), table_name='setups')
    op.drop_table('setups')
    op.drop_index(op.f('ix_regulations_title'), table_name='regulations')
    op.drop_index(op.f('ix_regulations_part'), table_name='regulations')
    op.drop_index(op.f('ix_regulations_name'), table_name='regulations')
    op.drop_index(op.f('ix_regulations_id'), table_name='regulations')
    op.drop_table('regulations')
    # ### end Alembic commands ###
